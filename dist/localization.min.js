/*!
 * Localization module
 *
 * @version 2.0.16
 * @author Alexandr Balasyan <mywebstreet@gmail.com>
 * {@link https://github.com/ortexx/localizationjs}
 */
!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.Localization=r():t.Localization=r()}(this,(function(){return(()=>{var t={1989:(t,r,e)=>{var n=e(1789),o=e(401),a=e(7667),i=e(1327),u=e(1866);function c(t){var r=-1,e=null==t?0:t.length;for(this.clear();++r<e;){var n=t[r];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},8407:(t,r,e)=>{var n=e(7040),o=e(4125),a=e(2117),i=e(7518),u=e(4705);function c(t){var r=-1,e=null==t?0:t.length;for(this.clear();++r<e;){var n=t[r];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},7071:(t,r,e)=>{var n=e(852)(e(5639),"Map");t.exports=n},3369:(t,r,e)=>{var n=e(4785),o=e(1285),a=e(6e3),i=e(9916),u=e(5265);function c(t){var r=-1,e=null==t?0:t.length;for(this.clear();++r<e;){var n=t[r];this.set(n[0],n[1])}}c.prototype.clear=n,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=u,t.exports=c},6384:(t,r,e)=>{var n=e(8407),o=e(7465),a=e(3779),i=e(7599),u=e(4758),c=e(4309);function s(t){var r=this.__data__=new n(t);this.size=r.size}s.prototype.clear=o,s.prototype.delete=a,s.prototype.get=i,s.prototype.has=u,s.prototype.set=c,t.exports=s},2705:(t,r,e)=>{var n=e(5639).Symbol;t.exports=n},1149:(t,r,e)=>{var n=e(5639).Uint8Array;t.exports=n},6874:t=>{t.exports=function(t,r,e){switch(e.length){case 0:return t.call(r);case 1:return t.call(r,e[0]);case 2:return t.call(r,e[0],e[1]);case 3:return t.call(r,e[0],e[1],e[2])}return t.apply(r,e)}},4636:(t,r,e)=>{var n=e(2545),o=e(5694),a=e(1469),i=e(4144),u=e(5776),c=e(6719),s=Object.prototype.hasOwnProperty;t.exports=function(t,r){var e=a(t),l=!e&&o(t),p=!e&&!l&&i(t),f=!e&&!l&&!p&&c(t),v=e||l||p||f,h=v?n(t.length,String):[],y=h.length;for(var d in t)!r&&!s.call(t,d)||v&&("length"==d||p&&("offset"==d||"parent"==d)||f&&("buffer"==d||"byteLength"==d||"byteOffset"==d)||u(d,y))||h.push(d);return h}},9932:t=>{t.exports=function(t,r){for(var e=-1,n=null==t?0:t.length,o=Array(n);++e<n;)o[e]=r(t[e],e,t);return o}},6556:(t,r,e)=>{var n=e(9465),o=e(7813);t.exports=function(t,r,e){(void 0!==e&&!o(t[r],e)||void 0===e&&!(r in t))&&n(t,r,e)}},4865:(t,r,e)=>{var n=e(9465),o=e(7813),a=Object.prototype.hasOwnProperty;t.exports=function(t,r,e){var i=t[r];a.call(t,r)&&o(i,e)&&(void 0!==e||r in t)||n(t,r,e)}},8470:(t,r,e)=>{var n=e(7813);t.exports=function(t,r){for(var e=t.length;e--;)if(n(t[e][0],r))return e;return-1}},9465:(t,r,e)=>{var n=e(8777);t.exports=function(t,r,e){"__proto__"==r&&n?n(t,r,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[r]=e}},3118:(t,r,e)=>{var n=e(3218),o=Object.create,a=function(){function t(){}return function(r){if(!n(r))return{};if(o)return o(r);t.prototype=r;var e=new t;return t.prototype=void 0,e}}();t.exports=a},8483:(t,r,e)=>{var n=e(5063)();t.exports=n},7786:(t,r,e)=>{var n=e(1811),o=e(327);t.exports=function(t,r){for(var e=0,a=(r=n(r,t)).length;null!=t&&e<a;)t=t[o(r[e++])];return e&&e==a?t:void 0}},4239:(t,r,e)=>{var n=e(2705),o=e(9607),a=e(2333),i=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":i&&i in Object(t)?o(t):a(t)}},8565:t=>{var r=Object.prototype.hasOwnProperty;t.exports=function(t,e){return null!=t&&r.call(t,e)}},9454:(t,r,e)=>{var n=e(4239),o=e(7005);t.exports=function(t){return o(t)&&"[object Arguments]"==n(t)}},8458:(t,r,e)=>{var n=e(3560),o=e(5346),a=e(3218),i=e(346),u=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,l=c.toString,p=s.hasOwnProperty,f=RegExp("^"+l.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!a(t)||o(t))&&(n(t)?f:u).test(i(t))}},8749:(t,r,e)=>{var n=e(4239),o=e(1780),a=e(7005),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,t.exports=function(t){return a(t)&&o(t.length)&&!!i[n(t)]}},313:(t,r,e)=>{var n=e(3218),o=e(5726),a=e(3498),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!n(t))return a(t);var r=o(t),e=[];for(var u in t)("constructor"!=u||!r&&i.call(t,u))&&e.push(u);return e}},2980:(t,r,e)=>{var n=e(6384),o=e(6556),a=e(8483),i=e(9783),u=e(3218),c=e(1704),s=e(6390);t.exports=function t(r,e,l,p,f){r!==e&&a(e,(function(a,c){if(f||(f=new n),u(a))i(r,e,c,l,t,p,f);else{var v=p?p(s(r,c),a,c+"",r,e,f):void 0;void 0===v&&(v=a),o(r,c,v)}}),c)}},9783:(t,r,e)=>{var n=e(6556),o=e(4626),a=e(7133),i=e(278),u=e(8517),c=e(5694),s=e(1469),l=e(9246),p=e(4144),f=e(3560),v=e(3218),h=e(8630),y=e(6719),d=e(6390),g=e(9881);t.exports=function(t,r,e,b,x,_,j){var w=d(t,e),m=d(r,e),O=j.get(m);if(O)n(t,e,O);else{var S=_?_(w,m,e+"",t,r,j):void 0,L=void 0===S;if(L){var k=s(m),D=!k&&p(m),A=!k&&!D&&y(m);S=m,k||D||A?s(w)?S=w:l(w)?S=i(w):D?(L=!1,S=o(m,!0)):A?(L=!1,S=a(m,!0)):S=[]:h(m)||c(m)?(S=w,c(w)?S=g(w):v(w)&&!f(w)||(S=u(m))):L=!1}L&&(j.set(m,S),x(S,m,b,_,j),j.delete(m)),n(t,e,S)}}},5976:(t,r,e)=>{var n=e(6557),o=e(5357),a=e(61);t.exports=function(t,r){return a(o(t,r,n),t+"")}},6560:(t,r,e)=>{var n=e(5703),o=e(8777),a=e(6557),i=o?function(t,r){return o(t,"toString",{configurable:!0,enumerable:!1,value:n(r),writable:!0})}:a;t.exports=i},2545:t=>{t.exports=function(t,r){for(var e=-1,n=Array(t);++e<t;)n[e]=r(e);return n}},531:(t,r,e)=>{var n=e(2705),o=e(9932),a=e(1469),i=e(3448),u=n?n.prototype:void 0,c=u?u.toString:void 0;t.exports=function t(r){if("string"==typeof r)return r;if(a(r))return o(r,t)+"";if(i(r))return c?c.call(r):"";var e=r+"";return"0"==e&&1/r==-Infinity?"-0":e}},1717:t=>{t.exports=function(t){return function(r){return t(r)}}},1811:(t,r,e)=>{var n=e(1469),o=e(5403),a=e(5514),i=e(9833);t.exports=function(t,r){return n(t)?t:o(t,r)?[t]:a(i(t))}},4318:(t,r,e)=>{var n=e(1149);t.exports=function(t){var r=new t.constructor(t.byteLength);return new n(r).set(new n(t)),r}},4626:(t,r,e)=>{t=e.nmd(t);var n=e(5639),o=r&&!r.nodeType&&r,a=o&&t&&!t.nodeType&&t,i=a&&a.exports===o?n.Buffer:void 0,u=i?i.allocUnsafe:void 0;t.exports=function(t,r){if(r)return t.slice();var e=t.length,n=u?u(e):new t.constructor(e);return t.copy(n),n}},7133:(t,r,e)=>{var n=e(4318);t.exports=function(t,r){var e=r?n(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}},278:t=>{t.exports=function(t,r){var e=-1,n=t.length;for(r||(r=Array(n));++e<n;)r[e]=t[e];return r}},8363:(t,r,e)=>{var n=e(4865),o=e(9465);t.exports=function(t,r,e,a){var i=!e;e||(e={});for(var u=-1,c=r.length;++u<c;){var s=r[u],l=a?a(e[s],t[s],s,e,t):void 0;void 0===l&&(l=t[s]),i?o(e,s,l):n(e,s,l)}return e}},4429:(t,r,e)=>{var n=e(5639)["__core-js_shared__"];t.exports=n},1463:(t,r,e)=>{var n=e(5976),o=e(6612);t.exports=function(t){return n((function(r,e){var n=-1,a=e.length,i=a>1?e[a-1]:void 0,u=a>2?e[2]:void 0;for(i=t.length>3&&"function"==typeof i?(a--,i):void 0,u&&o(e[0],e[1],u)&&(i=a<3?void 0:i,a=1),r=Object(r);++n<a;){var c=e[n];c&&t(r,c,n,i)}return r}))}},5063:t=>{t.exports=function(t){return function(r,e,n){for(var o=-1,a=Object(r),i=n(r),u=i.length;u--;){var c=i[t?u:++o];if(!1===e(a[c],c,a))break}return r}}},8777:(t,r,e)=>{var n=e(852),o=function(){try{var t=n(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},1957:(t,r,e)=>{var n="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g;t.exports=n},5050:(t,r,e)=>{var n=e(7019);t.exports=function(t,r){var e=t.__data__;return n(r)?e["string"==typeof r?"string":"hash"]:e.map}},852:(t,r,e)=>{var n=e(8458),o=e(7801);t.exports=function(t,r){var e=o(t,r);return n(e)?e:void 0}},5924:(t,r,e)=>{var n=e(5569)(Object.getPrototypeOf,Object);t.exports=n},9607:(t,r,e)=>{var n=e(2705),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,u=n?n.toStringTag:void 0;t.exports=function(t){var r=a.call(t,u),e=t[u];try{t[u]=void 0;var n=!0}catch(t){}var o=i.call(t);return n&&(r?t[u]=e:delete t[u]),o}},7801:t=>{t.exports=function(t,r){return null==t?void 0:t[r]}},222:(t,r,e)=>{var n=e(1811),o=e(5694),a=e(1469),i=e(5776),u=e(1780),c=e(327);t.exports=function(t,r,e){for(var s=-1,l=(r=n(r,t)).length,p=!1;++s<l;){var f=c(r[s]);if(!(p=null!=t&&e(t,f)))break;t=t[f]}return p||++s!=l?p:!!(l=null==t?0:t.length)&&u(l)&&i(f,l)&&(a(t)||o(t))}},1789:(t,r,e)=>{var n=e(4536);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},401:t=>{t.exports=function(t){var r=this.has(t)&&delete this.__data__[t];return this.size-=r?1:0,r}},7667:(t,r,e)=>{var n=e(4536),o=Object.prototype.hasOwnProperty;t.exports=function(t){var r=this.__data__;if(n){var e=r[t];return"__lodash_hash_undefined__"===e?void 0:e}return o.call(r,t)?r[t]:void 0}},1327:(t,r,e)=>{var n=e(4536),o=Object.prototype.hasOwnProperty;t.exports=function(t){var r=this.__data__;return n?void 0!==r[t]:o.call(r,t)}},1866:(t,r,e)=>{var n=e(4536);t.exports=function(t,r){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=n&&void 0===r?"__lodash_hash_undefined__":r,this}},8517:(t,r,e)=>{var n=e(3118),o=e(5924),a=e(5726);t.exports=function(t){return"function"!=typeof t.constructor||a(t)?{}:n(o(t))}},5776:t=>{var r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&r.test(t))&&t>-1&&t%1==0&&t<e}},6612:(t,r,e)=>{var n=e(7813),o=e(8612),a=e(5776),i=e(3218);t.exports=function(t,r,e){if(!i(e))return!1;var u=typeof r;return!!("number"==u?o(e)&&a(r,e.length):"string"==u&&r in e)&&n(e[r],t)}},5403:(t,r,e)=>{var n=e(1469),o=e(3448),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;t.exports=function(t,r){if(n(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!o(t))||(i.test(t)||!a.test(t)||null!=r&&t in Object(r))}},7019:t=>{t.exports=function(t){var r=typeof t;return"string"==r||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==t:null===t}},5346:(t,r,e)=>{var n,o=e(4429),a=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!a&&a in t}},5726:t=>{var r=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||r)}},7040:t=>{t.exports=function(){this.__data__=[],this.size=0}},4125:(t,r,e)=>{var n=e(8470),o=Array.prototype.splice;t.exports=function(t){var r=this.__data__,e=n(r,t);return!(e<0)&&(e==r.length-1?r.pop():o.call(r,e,1),--this.size,!0)}},2117:(t,r,e)=>{var n=e(8470);t.exports=function(t){var r=this.__data__,e=n(r,t);return e<0?void 0:r[e][1]}},7518:(t,r,e)=>{var n=e(8470);t.exports=function(t){return n(this.__data__,t)>-1}},4705:(t,r,e)=>{var n=e(8470);t.exports=function(t,r){var e=this.__data__,o=n(e,t);return o<0?(++this.size,e.push([t,r])):e[o][1]=r,this}},4785:(t,r,e)=>{var n=e(1989),o=e(8407),a=e(7071);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(a||o),string:new n}}},1285:(t,r,e)=>{var n=e(5050);t.exports=function(t){var r=n(this,t).delete(t);return this.size-=r?1:0,r}},6e3:(t,r,e)=>{var n=e(5050);t.exports=function(t){return n(this,t).get(t)}},9916:(t,r,e)=>{var n=e(5050);t.exports=function(t){return n(this,t).has(t)}},5265:(t,r,e)=>{var n=e(5050);t.exports=function(t,r){var e=n(this,t),o=e.size;return e.set(t,r),this.size+=e.size==o?0:1,this}},4523:(t,r,e)=>{var n=e(8306);t.exports=function(t){var r=n(t,(function(t){return 500===e.size&&e.clear(),t})),e=r.cache;return r}},4536:(t,r,e)=>{var n=e(852)(Object,"create");t.exports=n},3498:t=>{t.exports=function(t){var r=[];if(null!=t)for(var e in Object(t))r.push(e);return r}},1167:(t,r,e)=>{t=e.nmd(t);var n=e(1957),o=r&&!r.nodeType&&r,a=o&&t&&!t.nodeType&&t,i=a&&a.exports===o&&n.process,u=function(){try{var t=a&&a.require&&a.require("util").types;return t||i&&i.binding&&i.binding("util")}catch(t){}}();t.exports=u},2333:t=>{var r=Object.prototype.toString;t.exports=function(t){return r.call(t)}},5569:t=>{t.exports=function(t,r){return function(e){return t(r(e))}}},5357:(t,r,e)=>{var n=e(6874),o=Math.max;t.exports=function(t,r,e){return r=o(void 0===r?t.length-1:r,0),function(){for(var a=arguments,i=-1,u=o(a.length-r,0),c=Array(u);++i<u;)c[i]=a[r+i];i=-1;for(var s=Array(r+1);++i<r;)s[i]=a[i];return s[r]=e(c),n(t,this,s)}}},5639:(t,r,e)=>{var n=e(1957),o="object"==typeof self&&self&&self.Object===Object&&self,a=n||o||Function("return this")();t.exports=a},6390:t=>{t.exports=function(t,r){if(("constructor"!==r||"function"!=typeof t[r])&&"__proto__"!=r)return t[r]}},61:(t,r,e)=>{var n=e(6560),o=e(1275)(n);t.exports=o},1275:t=>{var r=Date.now;t.exports=function(t){var e=0,n=0;return function(){var o=r(),a=16-(o-n);if(n=o,a>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},7465:(t,r,e)=>{var n=e(8407);t.exports=function(){this.__data__=new n,this.size=0}},3779:t=>{t.exports=function(t){var r=this.__data__,e=r.delete(t);return this.size=r.size,e}},7599:t=>{t.exports=function(t){return this.__data__.get(t)}},4758:t=>{t.exports=function(t){return this.__data__.has(t)}},4309:(t,r,e)=>{var n=e(8407),o=e(7071),a=e(3369);t.exports=function(t,r){var e=this.__data__;if(e instanceof n){var i=e.__data__;if(!o||i.length<199)return i.push([t,r]),this.size=++e.size,this;e=this.__data__=new a(i)}return e.set(t,r),this.size=e.size,this}},5514:(t,r,e)=>{var n=e(4523),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=n((function(t){var r=[];return 46===t.charCodeAt(0)&&r.push(""),t.replace(o,(function(t,e,n,o){r.push(n?o.replace(a,"$1"):e||t)})),r}));t.exports=i},327:(t,r,e)=>{var n=e(3448);t.exports=function(t){if("string"==typeof t||n(t))return t;var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r}},346:t=>{var r=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return r.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},5703:t=>{t.exports=function(t){return function(){return t}}},7813:t=>{t.exports=function(t,r){return t===r||t!=t&&r!=r}},3522:(t,r,e)=>{var n=e(9833),o=/[\\^$.*+?()[\]{}|]/g,a=RegExp(o.source);t.exports=function(t){return(t=n(t))&&a.test(t)?t.replace(o,"\\$&"):t}},7361:(t,r,e)=>{var n=e(7786);t.exports=function(t,r,e){var o=null==t?void 0:n(t,r);return void 0===o?e:o}},8721:(t,r,e)=>{var n=e(8565),o=e(222);t.exports=function(t,r){return null!=t&&o(t,r,n)}},6557:t=>{t.exports=function(t){return t}},5694:(t,r,e)=>{var n=e(9454),o=e(7005),a=Object.prototype,i=a.hasOwnProperty,u=a.propertyIsEnumerable,c=n(function(){return arguments}())?n:function(t){return o(t)&&i.call(t,"callee")&&!u.call(t,"callee")};t.exports=c},1469:t=>{var r=Array.isArray;t.exports=r},8612:(t,r,e)=>{var n=e(3560),o=e(1780);t.exports=function(t){return null!=t&&o(t.length)&&!n(t)}},9246:(t,r,e)=>{var n=e(8612),o=e(7005);t.exports=function(t){return o(t)&&n(t)}},4144:(t,r,e)=>{t=e.nmd(t);var n=e(5639),o=e(5062),a=r&&!r.nodeType&&r,i=a&&t&&!t.nodeType&&t,u=i&&i.exports===a?n.Buffer:void 0,c=(u?u.isBuffer:void 0)||o;t.exports=c},3560:(t,r,e)=>{var n=e(4239),o=e(3218);t.exports=function(t){if(!o(t))return!1;var r=n(t);return"[object Function]"==r||"[object GeneratorFunction]"==r||"[object AsyncFunction]"==r||"[object Proxy]"==r}},1780:t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},3218:t=>{t.exports=function(t){var r=typeof t;return null!=t&&("object"==r||"function"==r)}},7005:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},8630:(t,r,e)=>{var n=e(4239),o=e(5924),a=e(7005),i=Function.prototype,u=Object.prototype,c=i.toString,s=u.hasOwnProperty,l=c.call(Object);t.exports=function(t){if(!a(t)||"[object Object]"!=n(t))return!1;var r=o(t);if(null===r)return!0;var e=s.call(r,"constructor")&&r.constructor;return"function"==typeof e&&e instanceof e&&c.call(e)==l}},3448:(t,r,e)=>{var n=e(4239),o=e(7005);t.exports=function(t){return"symbol"==typeof t||o(t)&&"[object Symbol]"==n(t)}},6719:(t,r,e)=>{var n=e(8749),o=e(1717),a=e(1167),i=a&&a.isTypedArray,u=i?o(i):n;t.exports=u},1704:(t,r,e)=>{var n=e(4636),o=e(313),a=e(8612);t.exports=function(t){return a(t)?n(t,!0):o(t)}},8306:(t,r,e)=>{var n=e(3369);function o(t,r){if("function"!=typeof t||null!=r&&"function"!=typeof r)throw new TypeError("Expected a function");var e=function(){var n=arguments,o=r?r.apply(this,n):n[0],a=e.cache;if(a.has(o))return a.get(o);var i=t.apply(this,n);return e.cache=a.set(o,i)||a,i};return e.cache=new(o.Cache||n),e}o.Cache=n,t.exports=o},2492:(t,r,e)=>{var n=e(2980),o=e(1463)((function(t,r,e){n(t,r,e)}));t.exports=o},5062:t=>{t.exports=function(){return!1}},9881:(t,r,e)=>{var n=e(8363),o=e(1704);t.exports=function(t){return n(t,o(t))}},9833:(t,r,e)=>{var n=e(531);t.exports=function(t){return null==t?"":n(t)}}},r={};function e(n){var o=r[n];if(void 0!==o)return o.exports;var a=r[n]={id:n,loaded:!1,exports:{}};return t[n](a,a.exports,e),a.loaded=!0,a.exports}e.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return e.d(r,{a:r}),r},e.d=(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var n={};return(()=>{"use strict";e.r(n),e.d(n,{Locale:()=>h,default:()=>y});var t=e(2492),r=e.n(t),o=e(8721),a=e.n(o),i=e(7361),u=e.n(i),c=e(3522),s=e.n(c);function l(t){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function f(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function v(t,r,e){return r&&f(t.prototype,r),e&&f(t,e),t}var h=function(){function t(r){if(p(this,t),r instanceof t)return r;if("string"==typeof r){var e=r.split(/[-_]+/g);this.language=e[0],e.length>1&&(this.country=e[e.length-1])}else{if(!r||"object"!=l(r))throw new Error("Wrong locale data");this.language=r.language,this.country=r.country}if(!this.language)throw new Error("Local instance must have at least language property");this.language=this.language.toLowerCase(),this.country&&(this.country=this.country.toUpperCase())}return v(t,[{key:"toString",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"-";return this.country?this.language+t+this.country:this.language}},{key:"is",value:function(r){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return r=new t(r),e?r.toString()==this.toString():r.language==this.language}}]),t}(),y=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p(this,t);var n={arraySign:"%%",objectPattern:{start:"{{",end:"}}"}};this.options=r()(n,e),this.dicts={},this.defaultLocale=new h(this.options.defaultLocale||{language:"en",country:"US"}),this.currentLocale=new h(this.options.currentLocale||this.defaultLocale)}return v(t,[{key:"setDefaultLocale",value:function(t){this.defaultLocale=new h(t),this.__fullDict=this.createFullDict()}},{key:"setCurrentLocale",value:function(t){this.currentLocale=new h(t),this.__fullDict=this.createFullDict()}},{key:"getDefaultLocale",value:function(){return this.defaultLocale}},{key:"getCurrentLocale",value:function(){return this.currentLocale}},{key:"translateParamsHandler",value:function(t){return t||""}},{key:"translateValueHandler",value:function(t,r){return void 0===t?r:t}},{key:"isLocale",value:function(t,r){return this.currentLocale.is(t,r)||this.defaultLocale.is(t,r)}},{key:"getLocaleVariants",value:function(t){var r=(t=new h(t)).toString(),e=t.toString("_");return[r,r.toLowerCase(),r.toUpperCase(),e,e.toLowerCase(),e.toUpperCase(),t.language.toLowerCase(),t.language.toUpperCase()]}},{key:"getDict",value:function(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=new h(t);var e=this.dicts[t.toString()];return e||r||(e=this.dicts[t.language]),e}},{key:"hasDict",value:function(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=new h(t);var e=this.dicts[t.toString()];return e||r||(e=this.dicts[t.language]),!!e}},{key:"addDict",value:function(t,e){t=new h(t),this.dicts[t.toString()]=r()({},e),this.isLocale(t)&&(this.__fullDict=this.createFullDict())}},{key:"mergeDict",value:function(t,e){var n=(t=new h(t)).toString(),o=this.dicts[n]||{};this.dicts[n]=r()({},o,e),this.isLocale(t)&&(this.__fullDict=this.createFullDict())}},{key:"removeDict",value:function(t){t=new h(t),delete this.dicts[t.toString()],this.isLocale(t)&&(this.__fullDict=this.createFullDict())}},{key:"getFullDict",value:function(){return this.__fullDict}},{key:"createFullDict",value:function(){return r()({},this.getDict(this.defaultLocale),this.getDict(this.currentLocale))}},{key:"hasTranslation",value:function(t){return a()(this.getFullDict(),t)}},{key:"translate",value:function(t){var r=this,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=u()(this.getFullDict(),t);if("string"==typeof n){if(!e||Array.isArray(e)){var o=0;n=n.replace(new RegExp(s()(this.options.arraySign),"g"),(function(){return r.translateParamsHandler(e?e[o++]:void 0,t,e)}))}if(!e||"object"==l(e)){var a=this.options.objectPattern,i=s()(a.start),c=s()(a.end);n=n.replace(new RegExp(i+"\\s*([\\w]+)\\s*"+c,"g"),(function(n,o){return r.translateParamsHandler(e?e[o]:void 0,t,e)}))}}return this.translateValueHandler(n,t,e)}},{key:"date",value:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=new Intl.DateTimeFormat(this.currentLocale.toString(),r);return e.format(t)}},{key:"number",value:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=new Intl.NumberFormat(this.currentLocale.toString(),r);return e.format(t)}},{key:"currency",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};n=r()({},n,{style:"currency",currency:e});var o=new Intl.NumberFormat(this.currentLocale.toString(),n);return o.format(t)}}]),t}();y.Locale=h,"object"==("undefined"==typeof window?"undefined":l(window))&&(window.Localization=y)})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,